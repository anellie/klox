package xyz.angm.lox

/** This file is autogenerated using [xyz.angm.lox.tool.defineAst]. DO NOT EDIT DIRECTLY! */
abstract class Statement {

    abstract fun <R> accept(visitor: Visitor<R>): R

    interface Visitor<R> {
        fun visitBlockStatement(statement: Block): R
        fun visitClassStatement(statement: Class): R
        fun visitExpressionStatement(statement: Expression): R
        fun visitFunctionStatement(statement: Function): R
        fun visitIfStatement(statement: If): R
        fun visitReturnStatement(statement: Return): R
        fun visitVarStatement(statement: Var): R
        fun visitWhileStatement(statement: While): R
    }

    class Block(
        val statements: List<Statement>
    ) : Statement() {
        override fun <R> accept(visitor: Visitor<R>) = visitor.visitBlockStatement(this)
    }

    class Class(
        val name: Token,
        val methods: List<Statement.Function>
    ) : Statement() {
        override fun <R> accept(visitor: Visitor<R>) = visitor.visitClassStatement(this)
    }

    class Expression(
        val expression: xyz.angm.lox.Expression
    ) : Statement() {
        override fun <R> accept(visitor: Visitor<R>) = visitor.visitExpressionStatement(this)
    }

    class Function(
        val name: Token,
        val params: List<Token>,
        val body: List<Statement>
    ) : Statement() {
        override fun <R> accept(visitor: Visitor<R>) = visitor.visitFunctionStatement(this)
    }

    class If(
        val condition: xyz.angm.lox.Expression,
        val thenBranch: Statement,
        val elseBranch: Statement?
    ) : Statement() {
        override fun <R> accept(visitor: Visitor<R>) = visitor.visitIfStatement(this)
    }

    class Return(
        val keyword: Token,
        val value: xyz.angm.lox.Expression?
    ) : Statement() {
        override fun <R> accept(visitor: Visitor<R>) = visitor.visitReturnStatement(this)
    }

    class Var(
        val name: Token,
        val initializer: xyz.angm.lox.Expression?
    ) : Statement() {
        override fun <R> accept(visitor: Visitor<R>) = visitor.visitVarStatement(this)
    }

    class While(
        val condition: xyz.angm.lox.Expression,
        val body: Statement
    ) : Statement() {
        override fun <R> accept(visitor: Visitor<R>) = visitor.visitWhileStatement(this)
    }

}
